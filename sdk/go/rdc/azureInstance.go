// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rdc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AzureInstance struct {
	pulumi.ResourceState

	// url of your running container
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewAzureInstance registers a new resource with the given unique name, arguments, and options.
func NewAzureInstance(ctx *pulumi.Context,
	name string, args *AzureInstanceArgs, opts ...pulumi.ResourceOption) (*AzureInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	var resource AzureInstance
	err := ctx.RegisterRemoteComponentResource("rdc:index:AzureInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type azureInstanceArgs struct {
	// The image you want to run
	Image string `pulumi:"image"`
	Port  int    `pulumi:"port"`
}

// The set of arguments for constructing a AzureInstance resource.
type AzureInstanceArgs struct {
	// The image you want to run
	Image pulumi.StringInput
	Port  pulumi.IntInput
}

func (AzureInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureInstanceArgs)(nil)).Elem()
}

type AzureInstanceInput interface {
	pulumi.Input

	ToAzureInstanceOutput() AzureInstanceOutput
	ToAzureInstanceOutputWithContext(ctx context.Context) AzureInstanceOutput
}

func (*AzureInstance) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureInstance)(nil))
}

func (i *AzureInstance) ToAzureInstanceOutput() AzureInstanceOutput {
	return i.ToAzureInstanceOutputWithContext(context.Background())
}

func (i *AzureInstance) ToAzureInstanceOutputWithContext(ctx context.Context) AzureInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureInstanceOutput)
}

func (i *AzureInstance) ToAzureInstancePtrOutput() AzureInstancePtrOutput {
	return i.ToAzureInstancePtrOutputWithContext(context.Background())
}

func (i *AzureInstance) ToAzureInstancePtrOutputWithContext(ctx context.Context) AzureInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureInstancePtrOutput)
}

type AzureInstancePtrInput interface {
	pulumi.Input

	ToAzureInstancePtrOutput() AzureInstancePtrOutput
	ToAzureInstancePtrOutputWithContext(ctx context.Context) AzureInstancePtrOutput
}

type azureInstancePtrType AzureInstanceArgs

func (*azureInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureInstance)(nil))
}

func (i *azureInstancePtrType) ToAzureInstancePtrOutput() AzureInstancePtrOutput {
	return i.ToAzureInstancePtrOutputWithContext(context.Background())
}

func (i *azureInstancePtrType) ToAzureInstancePtrOutputWithContext(ctx context.Context) AzureInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureInstancePtrOutput)
}

// AzureInstanceArrayInput is an input type that accepts AzureInstanceArray and AzureInstanceArrayOutput values.
// You can construct a concrete instance of `AzureInstanceArrayInput` via:
//
//          AzureInstanceArray{ AzureInstanceArgs{...} }
type AzureInstanceArrayInput interface {
	pulumi.Input

	ToAzureInstanceArrayOutput() AzureInstanceArrayOutput
	ToAzureInstanceArrayOutputWithContext(context.Context) AzureInstanceArrayOutput
}

type AzureInstanceArray []AzureInstanceInput

func (AzureInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureInstance)(nil)).Elem()
}

func (i AzureInstanceArray) ToAzureInstanceArrayOutput() AzureInstanceArrayOutput {
	return i.ToAzureInstanceArrayOutputWithContext(context.Background())
}

func (i AzureInstanceArray) ToAzureInstanceArrayOutputWithContext(ctx context.Context) AzureInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureInstanceArrayOutput)
}

// AzureInstanceMapInput is an input type that accepts AzureInstanceMap and AzureInstanceMapOutput values.
// You can construct a concrete instance of `AzureInstanceMapInput` via:
//
//          AzureInstanceMap{ "key": AzureInstanceArgs{...} }
type AzureInstanceMapInput interface {
	pulumi.Input

	ToAzureInstanceMapOutput() AzureInstanceMapOutput
	ToAzureInstanceMapOutputWithContext(context.Context) AzureInstanceMapOutput
}

type AzureInstanceMap map[string]AzureInstanceInput

func (AzureInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureInstance)(nil)).Elem()
}

func (i AzureInstanceMap) ToAzureInstanceMapOutput() AzureInstanceMapOutput {
	return i.ToAzureInstanceMapOutputWithContext(context.Background())
}

func (i AzureInstanceMap) ToAzureInstanceMapOutputWithContext(ctx context.Context) AzureInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureInstanceMapOutput)
}

type AzureInstanceOutput struct {
	*pulumi.OutputState
}

func (AzureInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureInstance)(nil))
}

func (o AzureInstanceOutput) ToAzureInstanceOutput() AzureInstanceOutput {
	return o
}

func (o AzureInstanceOutput) ToAzureInstanceOutputWithContext(ctx context.Context) AzureInstanceOutput {
	return o
}

func (o AzureInstanceOutput) ToAzureInstancePtrOutput() AzureInstancePtrOutput {
	return o.ToAzureInstancePtrOutputWithContext(context.Background())
}

func (o AzureInstanceOutput) ToAzureInstancePtrOutputWithContext(ctx context.Context) AzureInstancePtrOutput {
	return o.ApplyT(func(v AzureInstance) *AzureInstance {
		return &v
	}).(AzureInstancePtrOutput)
}

type AzureInstancePtrOutput struct {
	*pulumi.OutputState
}

func (AzureInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureInstance)(nil))
}

func (o AzureInstancePtrOutput) ToAzureInstancePtrOutput() AzureInstancePtrOutput {
	return o
}

func (o AzureInstancePtrOutput) ToAzureInstancePtrOutputWithContext(ctx context.Context) AzureInstancePtrOutput {
	return o
}

type AzureInstanceArrayOutput struct{ *pulumi.OutputState }

func (AzureInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureInstance)(nil))
}

func (o AzureInstanceArrayOutput) ToAzureInstanceArrayOutput() AzureInstanceArrayOutput {
	return o
}

func (o AzureInstanceArrayOutput) ToAzureInstanceArrayOutputWithContext(ctx context.Context) AzureInstanceArrayOutput {
	return o
}

func (o AzureInstanceArrayOutput) Index(i pulumi.IntInput) AzureInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureInstance {
		return vs[0].([]AzureInstance)[vs[1].(int)]
	}).(AzureInstanceOutput)
}

type AzureInstanceMapOutput struct{ *pulumi.OutputState }

func (AzureInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureInstance)(nil))
}

func (o AzureInstanceMapOutput) ToAzureInstanceMapOutput() AzureInstanceMapOutput {
	return o
}

func (o AzureInstanceMapOutput) ToAzureInstanceMapOutputWithContext(ctx context.Context) AzureInstanceMapOutput {
	return o
}

func (o AzureInstanceMapOutput) MapIndex(k pulumi.StringInput) AzureInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureInstance {
		return vs[0].(map[string]AzureInstance)[vs[1].(string)]
	}).(AzureInstanceOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureInstanceOutput{})
	pulumi.RegisterOutputType(AzureInstancePtrOutput{})
	pulumi.RegisterOutputType(AzureInstanceArrayOutput{})
	pulumi.RegisterOutputType(AzureInstanceMapOutput{})
}
